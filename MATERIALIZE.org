* Explore Materialize’s API

  Materialize offers ANSI Standard SQL, but is not simply a relational
  database. Instead of tables of data, you typically connect
  Materialize to external sources of data (called sources), and then
  create materialized views of the data that Materialize sees from
  those sources.

  To get started, though, we’ll begin with a simple version that
  doesn’t require connecting to an external data source.

  From your Materialize CLI, create a materialized view that contains
  actual data we can work with.

  #+BEGIN_SRC sql :engine postgresql :database materialize :dbhost localhost :dbport 6875
     CREATE MATERIALIZED VIEW pseudo_source (key, value) AS
       VALUES ('a', 1), ('a', 2), ('a', 3), ('a', 4),
       ('b', 5), ('c', 6), ('c', 7);
   #+END_SRC

   #+RESULTS:
   | CREATE VIEW |
   |-------------|

  You’ll notice that we end up entering data into Materialize by
  creating a materialized view from some other data, rather than the
  typical INSERT operation. This is how one interacts with
  Materialize. In most cases, this data would have come from an
  external source and get fed into Materialize from a file or a
  stream.

  With data in a materialized view, we can perform arbitrary SELECT
  statements on the data.

  Let’s start by viewing all of the data:

   #+BEGIN_SRC sql :engine postgresql :database materialize :dbhost localhost :dbport 6875
     SELECT * FROM pseudo_source;
   #+END_SRC

   #+RESULTS:
   | key | value |
   |-----+-------|
   | a   |     1 |
   | a   |     2 |
   | a   |     3 |
   | a   |     4 |
   | b   |     5 |
   | c   |     6 |
   | c   |     7 |

  Determine the sum of the values for each key:

   #+BEGIN_SRC sql :engine postgresql :database materialize :dbhost localhost :dbport 6875
     SELECT key, sum(value) FROM pseudo_source GROUP BY key;
   #+END_SRC

   #+RESULTS:
   | key | sum |
   |-----+-----|
   | a   |  10 |
   | b   |   5 |
   | c   |  13 |

  We can actually then save this query as its own materialized view:

   #+BEGIN_SRC sql :engine postgresql :database materialize :dbhost localhost :dbport 6875
     CREATE MATERIALIZED VIEW key_sums AS SELECT key, sum(value) FROM
       pseudo_source GROUP BY key;
   #+END_SRC

   #+RESULTS:
   | CREATE VIEW |
   |-------------|

  Determine the sum of all keys’ sums:

   #+BEGIN_SRC sql :engine postgresql :database materialize :dbhost localhost :dbport 6875
     SELECT sum(sum) FROM key_sums;
   #+END_SRC

   #+RESULTS:
   | sum |
   |-----|
   |  28 |

  We can also perform complex operations like JOINs. Given the
  simplicity of our data, the JOIN clauses themselves aren’t very
  exciting, but Materialize offers support for a full range of
  arbitrarily complex JOINs.

   #+BEGIN_SRC sql :engine postgresql :database materialize :dbhost localhost :dbport 6875
     CREATE MATERIALIZED VIEW lhs (key, value) AS
       VALUES ('x', 'a'), ('y', 'b'), ('z', 'c');
   #+END_SRC

   #+RESULTS:
   | CREATE VIEW |
   |-------------|

   #+BEGIN_SRC sql :engine postgresql :database materialize :dbhost localhost :dbport 6875
     SELECT lhs.key, sum(rhs.value)
       FROM lhs
              JOIN pseudo_source AS rhs
                  ON lhs.value = rhs.key
      GROUP BY lhs.key;
   #+END_SRC

   #+RESULTS:
   | key | sum |
   |-----+-----|
   | x   |  10 |
   | y   |   5 |
   | z   |  13 |

  Of course, these are trivial examples, but hope begin to illustrate
  some of Materialize’s potential.
