#+title: Datumbazo
#+author: r0man
#+LANGUAGE: en

[[https://travis-ci.org/r0man/sqlingvo][https://travis-ci.org/r0man/datumbazo.png]]
[[http://jarkeeper.com/r0man/sqlingvo][http://jarkeeper.com/r0man/datumbazo/status.png]]

Database Kung Fu in Clojure.

[[http://imgs.xkcd.com/comics/exploits_of_a_mom.png]]

* Installation

  [[https://clojars.org/sqlingvo][https://clojars.org/datumbazo/latest-version.svg]]

* Usage

  Datumbazo shadows some Clojure core functions, so exclude them.

  #+BEGIN_SRC clojure :exports code :results silent
  (refer-clojure :exclude '[distinct group-by])
  (require '[datumbazo.core :refer :all])
  #+END_SRC

  Define a database connection.

  #+BEGIN_SRC clojure :exports both :results silent
    (def db (new-db "postgresql://tiger:scotch@localhost/datumbazo"))
  #+END_SRC

  Select expressions. The column names are generated by the database
  driver and are database vendor specific.

  #+BEGIN_SRC clojure :exports both :results verbatim
    @(select db [1 2 3])
  #+END_SRC

  #+RESULTS:
  : ({:?column?-3 3, :?column?-2 2, :?column? 1})

  Create a countries table with `name` and `code` columns.

  #+BEGIN_SRC clojure :exports both :results verbatim
    @(create-table db :countries
       (column :id :serial :primary-key? true)
       (column :name :text)
       (column :code :text))
  #+END_SRC

  #+RESULTS:
  : ({:count 0})

  Insert a row into the countries table.

  #+BEGIN_SRC clojure :exports both :results verbatim
    @(insert db :countries []
       (values [{:code "de" :name "Germany"}
                {:code "es" :name "Spain"}]))
  #+END_SRC

  #+RESULTS:
  : ({:count 2})

  Select all countries.

  #+BEGIN_SRC clojure :exports both :results verbatim
    @(select db [:*]
       (from :countries))
  #+END_SRC

  #+RESULTS:
  : ({:code "de", :name "Germany", :id 1} {:code "es", :name "Spain", :id 2})

  Select the country id and code by name.

  #+BEGIN_SRC clojure :exports both :results verbatim
    @(select db [:id :code]
       (from :countries)
       (where '(= :name "Spain")))
  #+END_SRC

  #+RESULTS:
  : ({:code "es", :id 2})

  Call functions and aliases in expressions.

  #+BEGIN_SRC clojure :exports both :results verbatim
    @(select db [(as '(+ :id 10) :id)
                 (as '(upper :code) :code)]
       (from :countries))
  #+END_SRC

  #+RESULTS:
  : ({:code "DE", :id 11} {:code "ES", :id 12})

  Drop the countries table.

  #+BEGIN_SRC clojure :exports both :results verbatim
    @(drop-table db [:countries])
  #+END_SRC

  #+RESULTS:
  : ({:count 0})

* License

  Copyright Â© 2012-2014 roman

  Distributed under the Eclipse Public License, the same as Clojure.
